from aiogram import Dispatcher, types
# from dotenv import load_dotenv
# import os
# import logging
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# from aiogram.dispatcher.middlewares import BaseMiddleware
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.contrib.middlewares.logging import LoggingMiddleware
from models import User, Question, Answer, SessionLocal
# from middlewares import SQLAlchemySessionManager
from sqlalchemy import and_, desc
from config import dp


        
class Quiz(StatesGroup):
    q_number = State()



async def update_q_number(state: FSMContext, num: int):
    await state.update_data(q_number=num)


async def get_current_question_from_state(state: FSMContext):
    question_number = await state.get_data()
    question_number = question_number.get('q_number', 1)
    return question_number

async def check_answer(answer: str, question_number: int, db_session):
    return None

async def send_question(message: types.Message, question: str, retry = False):
    await message.answer(question)

# @dp.message_handler(commands=["Start"])
async def start_cmd(message: types.Message):
    db_session = message.conf['db_session']
    user = db_session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        # user does not exist yet, lets create one
        user = User(name=message.from_user.username, telegram_id=message.from_user.id)
        db_session.add(user)
        db_session.commit()
    await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç!''')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å –ø—É–Ω–∫—Ç.üí´")
    await message.answer("–ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ä–Ω–∏—Ü–∞ ... ")


# @dp.message_handler(commands=["quiz"])
async def quiz_cmd(message: types.Message):
    db_session = message.conf['db_session']
    user = db_session.query(User).filter_by(telegram_id=message.from_user.id).first()
    await Quiz.q_number.set()
    state = dp.current_state()
    first_question = db_session.query(Question).first()
    if first_question:
        await update_q_number(state, first_question.id)
        await message.answer(f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_question}")

# –ü–†–û–¶–ï–°–° –ü–†–û–í–ï–†–ö–ò –°–û–û–ë–©–ï–ù–ò–ô

async def process_answer(message: types.Message, state: FSMContext):
    db_session = message.conf['db_session']
    answer = message.text.strip()

    q_num = await get_current_question_from_state(state)
    current_question = db_session.query(Question).filter(Question.id == q_num).first()
    length = db_session.query(Question).count()

    if q_num < length:
        user = db_session.query(User).filter_by(telegram_id=message.from_user.id).first()
        user_answer = Answer(text=answer, user=user, question=current_question)
        db_session.add(user_answer)
        db_session.commit()

        next_question = db_session.query(Question).filter(Question.id > q_num).first()
        await send_question(message, next_question.text)
        await update_q_number(state, next_question.id)
    else:
        user = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.succeeded = True
            db_session.commit()
        await message.answer("–ú—ã –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        await state.finish()



# @dp.message_handler(commands=["Cancel"])
async def cancel_quiz(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –î–æ –≤—Å—Ç—Ä–µ—á! üíï")


# @dp.message_handler(commands=["Help"])
async def help_quiz(message: types.Message, state: FSMContext):
    await message.answer('''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç! \n –í—ã —Ç—É—Ç –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ /quiz . \n –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–ª–∏–∫–Ω—É–≤ /info .  \n –ö–ª–∏–∫–Ω—É–≤ –Ω–∞ /events –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    ''')


# @dp.message_handler(commands=["Information"])
async def info_cmd(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", "–ü–æ—Å–æ–±–∏—è", "–ì–¥–µ –ø–æ–≥—É–ª—è—Ç—å", "–õ—å–≥–æ—Ç—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
    # for button_text in buttons:
        # keyboard.add(KeyboardButton(button_text))
    keyboard.add(*buttons)

    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π:', reply_markup=keyboard)



# @dp.message_handler(commands=["Events"])
async def events_cmd(message: types.Message, state: FSMContext):
    await message.answer('''Soon coming''')

#BUTTONS
async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("quiz", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å"),
        types.BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        types.BotCommand("cancel", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å"),
        types.BotCommand("events", "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
    ])


async def handle_invalidnost(message: types.Message):

    await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏")


async def handle_posobia(message: types.Message):
    await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è –ü–æ—Å–æ–±–∏–∏")


async def handle_walk(message: types.Message):
    await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è –º–µ—Å—Ç –¥–ª—è –ü—Ä–æ–≥—É–ª–æ–∫")


async def handle_lgoty(message: types.Message):
    await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è –õ—å–≥–æ—Ç")


async def handle_obrazovanie(message: types.Message):
    await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")


#LIST OF FUNCTIONS OF BUTTONS
def register_hadlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=["start"])
    dp.register_message_handler(help_quiz, commands=["help"], state="*")  
    dp.register_message_handler(quiz_cmd, commands=["quiz"])
    dp.register_message_handler(cancel_quiz, commands=["cancel"], state="*")    
    dp.register_message_handler(info_cmd, commands=["info"], state="*")
    dp.register_message_handler(events_cmd, commands=["events"], state="*")

    dp.register_message_handler(handle_invalidnost, Text(equals="–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"))
    dp.register_message_handler(handle_posobia, Text(equals="–ü–æ—Å–æ–±–∏—è"))
    dp.register_message_handler(handle_walk, Text(equals="–ì–¥–µ –ø–æ–≥—É–ª—è—Ç—å"))
    dp.register_message_handler(handle_lgoty, Text(equals="–õ—å–≥–æ—Ç—ã"))
    dp.register_message_handler(handle_obrazovanie, Text(equals="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"))

    dp.register_message_handler(process_answer, state=Quiz.q_number)


# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
# dp.register_callback_query_handler(button_click_handler)